"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[9258],{8795:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(5893),i=r(3905);const a={slug:"february-2024-update",title:"February 2024 Update",date:"2024-03-06T10:22",authors:["bpepple"],tags:["comic","database","metron","metrontagger"]},o="February 2024 News",s={permalink:"/blog/february-2024-update",source:"@site/blog/2024-03-01-feb-update/index.md",title:"February 2024 Update",description:"Monthly statistics",date:"2024-03-06T10:22:00.000Z",tags:[{label:"comic",permalink:"/blog/tags/comic"},{label:"database",permalink:"/blog/tags/database"},{label:"metron",permalink:"/blog/tags/metron"},{label:"metrontagger",permalink:"/blog/tags/metrontagger"}],readingTime:1.98,hasTruncateMarker:!1,authors:[{name:"Brian Pepple",title:"Founder of the Metron Project / Code Monkey",url:"https://github.com/bpepple",imageURL:"https://github.com/bpepple.png",key:"bpepple"}],frontMatter:{slug:"february-2024-update",title:"February 2024 Update",date:"2024-03-06T10:22",authors:["bpepple"],tags:["comic","database","metron","metrontagger"]},unlisted:!1,prevItem:{title:"April 2024 Update",permalink:"/blog/april-2024-update"},nextItem:{title:"January 2024 Update",permalink:"/blog/january-2024-update"}},l={authorsImageUrls:[void 0]},c=[{value:"Monthly statistics",id:"monthly-statistics",level:2},{value:"ComicTagger",id:"comictagger",level:2},{value:"Server News",id:"server-news",level:2},{value:"Metron-Tagger",id:"metron-tagger",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.ah)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"monthly-statistics",children:"Monthly statistics"}),"\n",(0,n.jsxs)(t.p,{children:["During February the ",(0,n.jsx)(t.a,{href:"https://metron.cloud/",children:"Metron Project"})," had a total of ",(0,n.jsx)(t.strong,{children:"5,635"})," issues added to its database during\nFebruary bring the total number of issues to ",(0,n.jsx)(t.strong,{children:"112,135"}),". We also had ",(0,n.jsx)(t.strong,{children:"65"})," new users join."]}),"\n",(0,n.jsx)(t.h2,{id:"comictagger",children:"ComicTagger"}),"\n",(0,n.jsxs)(t.p,{children:["Recently ",(0,n.jsx)(t.a,{href:"https://github.com/comictagger/comictagger",children:"comictagger"})," released the ",(0,n.jsx)(t.a,{href:"https://github.com/comictagger/metron_talker",children:"metron_talker"})," plugin, but unfortunately it's got a few design flaws\nthat is generating 2-4 times the number of API calls compared to other clients, and it's also downloading the cover for\neach issue, instead of using the issue's ",(0,n.jsx)(t.code,{children:"cover_hash"})," exposed by the Metron API. The developers are working on\naddressing these issues, but if you are planning to tag a large number of comics we would appreciate it if you waited\nfor a new release or use Metron-Tagger in the interim."]}),"\n",(0,n.jsx)(t.h2,{id:"server-news",children:"Server News"}),"\n",(0,n.jsx)(t.p,{children:"With the server load increase due to the comictagger bug, I've gone ahead and increased the CPU and RAM for the server\nand with any luck users shouldn't see a decrease in server quality of service."}),"\n",(0,n.jsx)(t.h2,{id:"metron-tagger",children:"Metron-Tagger"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/ajslater",children:"AJ Slater"})," recently released a new library (",(0,n.jsx)(t.a,{href:"https://github.com/ajslater/comicfn2dict",children:"comicfn2dict"}),") for parsing comic filenames, and since the code\nfor handling that in ",(0,n.jsx)(t.a,{href:"https://github.com/Metron-Project/darkseid",children:"darkseid"})," was fairly old and crusty it seemed like a good time to do a little work on\n",(0,n.jsx)(t.a,{href:"https://github.com/Metron-Project/metron-tagger",children:"Metron-Tagger"}),". Some of the changes are as follows:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"comicfn2dict"}),"\n",(0,n.jsxs)(t.p,{children:["So, I switched over to using ",(0,n.jsx)(t.code,{children:"comicfn2dict"})," for filename parsing, and did some testing on around 1,000 or so comics.\nOverall, it's performed as well as the old code and has the added benefit of being used by multiple projects."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Improved Matching"}),"\n",(0,n.jsx)(t.p,{children:"Spent some time improving comic matching by implementing the following changes:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Only use the series name and issue number when querying Metron. By doing this we are likely to get a result from\nMetron. Also, we are striping out any special characters (like ",(0,n.jsx)(t.code,{children:","}),", ",(0,n.jsx)(t.code,{children:"-"}),", or ",(0,n.jsx)(t.code,{children:"&"}),") from the series name."]}),"\n",(0,n.jsxs)(t.li,{children:["Use the ",(0,n.jsx)(t.code,{children:"cover hash"})," from Metron to verify the issue is correct, otherwise we'll ask the user for help."]}),"\n",(0,n.jsxs)(t.li,{children:["Use existing ",(0,n.jsx)(t.code,{children:"ComicInfo.xml"})," for matching. If a comic has already been tagged by comictagger (or Metron-Tagger)\nand has information to help identify the issue (like the ",(0,n.jsx)(t.a,{href:"https://comicvine.gamespot.com/",children:"Comic Vine"})," ID), we'll\nuse that before using the filename."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,n.jsx)(t.p,{children:"Right now, I'm thinking about making some changes to the API (like adding versioning), and if I do I'll ask the\ncommunity for any suggestions of changes they'd like to see."})]})}function h(e={}){const{wrapper:t}={...(0,i.ah)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>c});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),g=c(r),u=i,m=g["".concat(l,".").concat(u)]||g[u]||d[u]||a;return r?n.createElement(m,o(o({ref:t},h),{},{components:r})):n.createElement(m,o({ref:t},h))}));h.displayName="MDXCreateElement"}}]);