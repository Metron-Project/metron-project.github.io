"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[9573],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={slug:"podman-gcd",title:"Using Podman to Run GCD Database Locally",date:"2022-10-08T11:35",authors:["bpepple"],tags:["comic","database","podman","mysql","gcd","grandcomicdatabase"]},i=void 0,l={permalink:"/blog/podman-gcd",source:"@site/blog/2022-10-08-podman/index.md",title:"Using Podman to Run GCD Database Locally",description:"I've had a few users ask me how to run the Grand Comics Database's database locally, so I figured I'd do a short write-up on how I do it.",date:"2022-10-08T11:35:00.000Z",formattedDate:"October 8, 2022",tags:[{label:"comic",permalink:"/blog/tags/comic"},{label:"database",permalink:"/blog/tags/database"},{label:"podman",permalink:"/blog/tags/podman"},{label:"mysql",permalink:"/blog/tags/mysql"},{label:"gcd",permalink:"/blog/tags/gcd"},{label:"grandcomicdatabase",permalink:"/blog/tags/grandcomicdatabase"}],readingTime:5.06,hasTruncateMarker:!1,authors:[{name:"Brian Pepple",title:"Founder of the Metron Project / Code Monkey",url:"https://github.com/bpepple",imageURL:"https://github.com/bpepple.png",key:"bpepple"}],frontMatter:{slug:"podman-gcd",title:"Using Podman to Run GCD Database Locally",date:"2022-10-08T11:35",authors:["bpepple"],tags:["comic","database","podman","mysql","gcd","grandcomicdatabase"]},nextItem:{title:"OS Upgrade",permalink:"/blog/ubuntu-2204-lts"}},p={authorsImageUrls:[void 0]},s=[],d={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I've had a few users ask me how to run the ",(0,r.kt)("a",{parentName:"p",href:"https://www.comics.org/"},"Grand Comics Database's")," database locally, so I figured I'd do a short write-up on how I do it."),(0,r.kt)("p",null,"I use ",(0,r.kt)("a",{parentName:"p",href:"https://podman.io/"},"Podman")," for containers instead of ",(0,r.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker"),", but the differences between them is fairly minimal and this should give you a good idea of how to do it. Anyway, let's get started!"),(0,r.kt)("p",null,"First off, you'll want to download the most recent database dump from GCD which can be found ",(0,r.kt)("a",{parentName:"p",href:"https://www.comics.org/download/"},"here"),". Once it's finished downloading, unzip the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unzip current.zip -d /tmp/\n")),(0,r.kt)("p",null,"You should see output similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Archive:  current.zip\n  inflating: /tmp/2022-10-01.sql   \n")),(0,r.kt)("p",null,"Ok, now that we've got the data from gcd, let's create a ",(0,r.kt)("a",{parentName:"p",href:"https://www.mysql.com/"},"MySQL")," container. We need to first pull a MySQL image, which can be done by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman pull docker.io/library/mysql:5.7\n")),(0,r.kt)("p",null,"After it's done downloading the image, you can confirm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman images\n")),(0,r.kt)("p",null,"which should return output similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bpepple@frodo ~ $ podman images mysql\nREPOSITORY               TAG         IMAGE ID      CREATED       SIZE\ndocker.io/library/mysql  5.7         eb175b0743cc  19 hours ago  448 MB\n")),(0,r.kt)("p",null,"Now we need to create the container. You'll want to replace user and mysql credentials with your own values. The ",(0,r.kt)("inlineCode",{parentName:"p"},"volume")," flag is where on your filesystem you want to save the database. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," suffix is used for systems, primarily ",(0,r.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/linux/what-is-selinux"},"Red Hat"),"-based, that use ",(0,r.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/linux/what-is-selinux"},"SELinux"),". If you don't use SELinux that can be dropped:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman run -d --name mysql -p 3306:3306 -e MYSQL_USER=bpepple -e MYSQL_PASSWORD=123456 -e MYSQL_DATABASE=gcd -e MYSQL_ROOT_PASSWORD=567890 --volume /home/bpepple/Storage/pods/mysql/:/var/lib/mysql:Z mysql:5.7\n")),(0,r.kt)("p",null,"Now let's verify that the container was created and is running by using the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman ps\n")),(0,r.kt)("p",null,"You should see output similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bpepple@frodo ~ $ podman ps\nCONTAINER ID  IMAGE                       COMMAND CREATED       STATUS           PORTS                  NAMES\n400c957ae25d  docker.io/library/mysql:5.7 mysqld  7 seconds ago Up 7 seconds ago 0.0.0.0:3306->3306/tcp mysql\n")),(0,r.kt)("p",null,"Now we just need to dump the data from GCD into the database. We can do this by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cat /tmp/2022-10-01.sql | podman exec -i mysql /usr/bin/mysql -u root --password=567890 gcd\n")),(0,r.kt)("p",null,"Depending on the specs of your machine, this might be a good time to grab some coffee, since the SQL dump is ",(0,r.kt)("strong",{parentName:"p"},"very")," large and will take awhile to finish. Once it's done, we can start using the database by attaching to the container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman exec -it mysql mysql -ubpepple -p gcd\n")),(0,r.kt)("p",null,"This command will prompt you for your password, and then you'll see the MySQL prompt where you can run a simple SQL statement like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," DESCRIBE gcd_issue;\n")),(0,r.kt)("p",null,"Which should produce output similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+---------------+------+-----+---------------------+----------------+\n| Field                      | Type          | Null | Key | Default             | Extra          |\n+----------------------------+---------------+------+-----+---------------------+----------------+\n| id                         | int(11)       | NO   | PRI | NULL                | auto_increment |\n| number                     | varchar(50)   | NO   | MUL | NULL                |                |\n| volume                     | varchar(50)   | NO   | MUL |                     |                |\n| no_volume                  | tinyint(1)    | NO   | MUL | 0                   |                |\n| display_volume_with_number | tinyint(1)    | NO   | MUL | 0                   |                |\n| series_id                  | int(11)       | NO   | MUL | NULL                |                |\n| indicia_publisher_id       | int(11)       | YES  | MUL | NULL                |                |\n| indicia_pub_not_printed    | tinyint(1)    | NO   |     | NULL                |                |\n| brand_id                   | int(11)       | YES  | MUL | NULL                |                |\n| no_brand                   | tinyint(1)    | NO   | MUL | NULL                |                |\n| publication_date           | varchar(255)  | NO   |     | NULL                |                |\n| key_date                   | varchar(10)   | NO   | MUL | NULL                |                |\n| sort_code                  | int(11)       | NO   | MUL | NULL                |                |\n| price                      | varchar(255)  | NO   |     | NULL                |                |\n| page_count                 | decimal(10,3) | YES  |     | NULL                |                |\n| page_count_uncertain       | tinyint(1)    | NO   |     | 0                   |                |\n| indicia_frequency          | varchar(255)  | NO   |     |                     |                |\n| no_indicia_frequency       | tinyint(1)    | NO   | MUL | 0                   |                |\n| editing                    | longtext      | NO   |     | NULL                |                |\n| no_editing                 | tinyint(1)    | NO   | MUL | 0                   |                |\n| notes                      | longtext      | NO   |     | NULL                |                |\n| created                    | datetime      | NO   |     | 1901-01-01 00:00:00 |                |\n| modified                   | datetime      | NO   | MUL | 1901-01-01 00:00:00 |                |\n| deleted                    | tinyint(1)    | NO   | MUL | 0                   |                |\n| is_indexed                 | tinyint(1)    | NO   | MUL | 0                   |                |\n| isbn                       | varchar(32)   | NO   | MUL |                     |                |\n| valid_isbn                 | varchar(13)   | NO   | MUL |                     |                |\n| no_isbn                    | tinyint(1)    | NO   | MUL | 0                   |                |\n| variant_of_id              | int(11)       | YES  | MUL | NULL                |                |\n| variant_name               | varchar(255)  | NO   |     |                     |                |\n| barcode                    | varchar(38)   | NO   | MUL |                     |                |\n| no_barcode                 | tinyint(1)    | NO   |     | 0                   |                |\n| title                      | varchar(255)  | NO   | MUL |                     |                |\n| no_title                   | tinyint(1)    | NO   | MUL | 0                   |                |\n| on_sale_date               | varchar(10)   | NO   | MUL | NULL                |                |\n| on_sale_date_uncertain     | tinyint(1)    | NO   |     | 0                   |                |\n| rating                     | varchar(255)  | NO   | MUL | NULL                |                |\n| no_rating                  | tinyint(1)    | NO   | MUL | NULL                |                |\n| volume_not_printed         | tinyint(1)    | NO   |     | NULL                |                |\n| no_indicia_printer         | tinyint(1)    | NO   |     | NULL                |                |\n+----------------------------+---------------+------+-----+---------------------+----------------+\n40 rows in set (0.00 sec)\n\n")),(0,r.kt)("p",null,"Great! We've got the database up and running, to logout from the container just type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\\q\n")),(0,r.kt)("p",null,"To stop the container, you would just use the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman stop mysql\n")),(0,r.kt)("p",null,"And that's it! Podman has tons of niceties (like auto-updating images, using ",(0,r.kt)("a",{parentName:"p",href:"https://systemd.io/"},"systemd")," for container start-ups, etc.) and I'd encourage you to read up on using some its many features. If it get some free time, I'll do a following up article about using ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/"},"Python")," to query the database and using that data for things like writing metadata to comic archives."))}c.isMDXComponent=!0}}]);