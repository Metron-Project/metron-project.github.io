"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[468],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),f=s(n),u=o,d=f["".concat(c,".").concat(u)]||f[u]||p[u]||i;return n?r.createElement(d,a(a({ref:t},m),{},{components:n})):r.createElement(d,a({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2,title:"MetronInfo.xml"},a=void 0,l={unversionedId:"metroninfo/intro",id:"metroninfo/intro",title:"MetronInfo.xml",description:"What is it?",source:"@site/docs/metroninfo/intro.md",sourceDirName:"metroninfo",slug:"/metroninfo/intro",permalink:"/docs/metroninfo/intro",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"MetronInfo.xml"},sidebar:"tutorialSidebar",previous:{title:"MetronInfo",permalink:"/docs/category/metroninfo"},next:{title:"Schema documentation",permalink:"/docs/metroninfo/documentation"}},c={},s=[{value:"What is it?",id:"what-is-it",level:2},{value:"Rationale",id:"rationale",level:2}],m={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-it"},"What is it?"),(0,o.kt)("p",null,"A new XML schema for comic book's metadata, which hopes to improve some of the some of the deficiencies that\nexist with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ComicInfo.xml")," schema."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ComicInfo.xml")," schema was designed for the needs of ComicRack Application (which for all intents is a dead project), and supports a fairly limited amount of data. Some benefits of a new schema would include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Additional ",(0,o.kt)("inlineCode",{parentName:"li"},"Elements")," for information. (eg. Price, Global Trade Item Numbers, Series Type, etc.)"),(0,o.kt)("li",{parentName:"ul"},"Better handling of data types. Instead of using delimited strings for list items, we can use Arrays of ",(0,o.kt)("inlineCode",{parentName:"li"},"Elements"),". "),(0,o.kt)("li",{parentName:"ul"},"Ability to identify where the data was obtained from. (eg. Comic Vine, Metron, Grand Comics Database, etc.)"),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"ID")," elements from the Information Source to resources (Characters, Creators, etc), so items with the same name are associated correctly if used in a Plex-like Comic Server.")),(0,o.kt)("p",null,"Since Digital Comics are just are archive files (like .zip) this new XML schema can co-exist with any existing ",(0,o.kt)("inlineCode",{parentName:"p"},"ComicInfo.xml")," if needed for backward compatibility."))}p.isMDXComponent=!0}}]);