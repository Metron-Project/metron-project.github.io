"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[4975],{1419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"metron-tagger","title":"Metron-Tagger","description":"What is it?","source":"@site/docs/metron-tagger.md","sourceDirName":".","slug":"/metron-tagger","permalink":"/docs/metron-tagger","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"sidebar_position":70,"label":"Metron-Tagger"},"sidebar":"tutorialSidebar","previous":{"title":"Darkseid","permalink":"/docs/darkseid"}}');var i=n(4848),r=n(8453);const o={sidebar_position:70,label:"Metron-Tagger"},s="Metron-Tagger",l={},d=[{value:"What is it?",id:"what-is-it",level:2},{value:"Installation",id:"installation",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Code",id:"code",level:2},{value:"Bugs / Feature Requests",id:"bugs--feature-requests",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"metron-tagger",children:"Metron-Tagger"})}),"\n",(0,i.jsx)(t.h2,{id:"what-is-it",children:"What is it?"}),"\n",(0,i.jsx)(t.p,{children:"Metron-Tagger is a command line tool to tag comic archives with metadata from Metron Comic Book Database."}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"$ pipx install metron-tagger\n"})}),"\n",(0,i.jsx)(t.h2,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"usage: metron-tagger [-h] [-r] [-o] [--id ID] [-d] [--ignore-existing] [-i] [--missing] [-s] [-z] [--validate] [--remove-non-valid] [--delete-original] [--duplicates]\n                     [--version]\n                     path [path ...]\n\nRead in a file or set of files, and return the result.\n\npositional arguments:\n  path                 Path of a file or a folder of files.\n\noptions:\n  -h, --help           show this help message and exit\n  -r, --rename         Rename comic archive from the files metadata. (default: False)\n  -o, --online         Search online and attempt to identify comic archive. (default: False)\n  --id ID              Identify file for tagging with the Metron Issue Id. (default: None)\n  -d, --delete         Delete the metadata tags from the file. (default: False)\n  --ignore-existing    Ignore files that have existing metadata tag. (default: False)\n  -i, --interactive    Interactively query the user when there are matches for an online search. (default: False)\n  --missing            List files without metadata. (default: False)\n  -s, --sort           Sort files that contain metadata tags. (default: False)\n  -z, --export-to-cbz  Export a CBR (rar) archive to a CBZ (zip) archive. (default: False)\n  --validate           Verify that comic archive has a valid ComicInfo.xml. (default: False)\n  --remove-non-valid   Remove ComicInfo.xml from comic if not valid. Used with --validate option (default: False)\n  --delete-original    Delete the original archive after successful export to another format. (default: False)\n  --duplicates         Identify and give the option to delete duplicate pages in a directory of comics. (Experimental) (default: False)\n  --version            Show the version number and exit\n\n"})}),"\n",(0,i.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,i.jsxs)(t.p,{children:["The projects code can be found at ",(0,i.jsx)(t.a,{href:"https://github.com/Metron-Project/metron-tagger",children:"GitHub"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"bugs--feature-requests",children:"Bugs / Feature Requests"}),"\n",(0,i.jsxs)(t.p,{children:["Any bugs or feature requests can be filed ",(0,i.jsx)(t.a,{href:"https://github.com/Metron-Project/metron-tagger/issues",children:"here"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(6540);const i={},r=a.createContext(i);function o(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);