"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[4635],{880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"metroninfo/intro","title":"MetronInfo.xml","description":"What is it?","source":"@site/docs/metroninfo/intro.md","sourceDirName":"metroninfo","slug":"/metroninfo/intro","permalink":"/docs/metroninfo/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"MetronInfo.xml"},"sidebar":"tutorialSidebar","previous":{"title":"MetronInfo","permalink":"/docs/category/metroninfo"},"next":{"title":"Schema documentation","permalink":"/docs/metroninfo/documentation"}}');var o=n(4848),s=n(8453);const r={sidebar_position:2,title:"MetronInfo.xml"},a=void 0,c={},l=[{value:"What is it?",id:"what-is-it",level:2},{value:"Rationale",id:"rationale",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"what-is-it",children:"What is it?"}),"\n",(0,o.jsxs)(t.p,{children:["A new XML schema for comic book's metadata, which hopes to improve some of the deficiencies that exist with the\n",(0,o.jsx)(t.code,{children:"ComicInfo.xml"})," schema."]}),"\n",(0,o.jsx)(t.h2,{id:"rationale",children:"Rationale"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ComicInfo.xml"})," schema was designed for the needs of ComicRack Application (which for all intents is a dead\nproject), and supports a fairly limited amount of data. Some benefits of a new schema would include:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Additional ",(0,o.jsx)(t.code,{children:"Elements"})," for information. (eg. Price, Global Trade Item Numbers, Series Type, etc.)"]}),"\n",(0,o.jsxs)(t.li,{children:["Better handling of data types. Instead of using delimited strings for list items, we can use Arrays of ",(0,o.jsx)(t.code,{children:"Elements"}),"."]}),"\n",(0,o.jsx)(t.li,{children:"Ability to identify where the data was obtained from. (eg. Comic Vine, Metron, Grand Comics Database, etc.)"}),"\n",(0,o.jsxs)(t.li,{children:["Add ",(0,o.jsx)(t.code,{children:"ID"})," elements from the Information Source to resources (Characters, Creators, etc), so items with the same name\nare associated correctly if used in a Plex-like Comic Server."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Since Digital Comics are just are archive files (like .zip) this new XML schema can co-exist with any existing\n",(0,o.jsx)(t.code,{children:"ComicInfo.xml"})," if needed for backward compatibility."]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);