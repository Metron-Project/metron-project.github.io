"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[5858],{8330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(5893),a=n(3905);const i={slug:"series-type-change",title:"Limited Series Type",date:"2022-12-04T16:51",authors:["bpepple"],tags:["comic","database","series"]},o=void 0,s={permalink:"/blog/series-type-change",source:"@site/blog/2022-12-04-series-type/index.md",title:"Limited Series Type",description:"Made a minor change to the series types available by consolidating mini & maxi-series to the new Limited Series type. There isn't a real definite value for mini and maxi series, and really it makes more sense to not bother differentiating them. So, I've gone ahead and migrated the existing data for this change, and users should see this change. If you have any questions or thoughts, don't hesitate to contact me.",date:"2022-12-04T16:51:00.000Z",tags:[{label:"comic",permalink:"/blog/tags/comic"},{label:"database",permalink:"/blog/tags/database"},{label:"series",permalink:"/blog/tags/series"}],readingTime:.36,hasTruncateMarker:!1,authors:[{name:"Brian Pepple",title:"Founder of the Metron Project / Code Monkey",url:"https://github.com/bpepple",imageURL:"https://github.com/bpepple.png",key:"bpepple"}],frontMatter:{slug:"series-type-change",title:"Limited Series Type",date:"2022-12-04T16:51",authors:["bpepple"],tags:["comic","database","series"]},unlisted:!1,prevItem:{title:"Latest Happenings",permalink:"/blog/latest-happenings"},nextItem:{title:"Using Podman to Run GCD Database Locally",permalink:"/blog/podman-gcd"}},c={authorsImageUrls:[void 0]},l=[];function p(e){const t={a:"a",em:"em",p:"p",strong:"strong",...(0,a.ah)(),...e.components};return(0,r.jsxs)(t.p,{children:["Made a minor change to the ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"series types"})})," available by consolidating ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"mini & maxi-series"})})," to the new ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"Limited Series"})})," type. There isn't a real definite value for mini and maxi series, and really it makes more sense to not bother differentiating them. So, I've gone ahead and migrated the existing data for this change, and users should see this change. If you have any questions or thoughts, don't hesitate to contact ",(0,r.jsx)(t.a,{href:"mailto:bpepple@metron.cloud",children:"me"}),"."]})}function m(e={}){const{wrapper:t}={...(0,a.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3905:(e,t,n)=>{n.d(t,{ah:()=>l});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,u=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(u,o(o({ref:t},m),{},{components:n})):r.createElement(u,o({ref:t},m))}));m.displayName="MDXCreateElement"}}]);