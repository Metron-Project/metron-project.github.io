"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[1254],{1962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var i=t(7075),a=t(4848),o=t(8453);const r={slug:"podman-gcd",title:"Using Podman to Run GCD Database Locally",date:"2022-10-08T11:35",authors:["bpepple"],tags:["comic","database","podman","mysql","gcd","grandcomicdatabase"]},s=void 0,d={authorsImageUrls:[void 0]},c=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["I've had a few users ask me how to run a local copy of the ",(0,a.jsx)(n.a,{href:"https://www.comics.org/",children:"Grand Comics Database"}),", so I figured I'd do a short write-up on how I do it."]}),"\n",(0,a.jsxs)(n.p,{children:["I use ",(0,a.jsx)(n.a,{href:"https://podman.io/",children:"Podman"})," for containers instead of ",(0,a.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"}),", but the differences between them is fairly minimal and this should give you a good idea of how to do it. Anyway, let's get started!"]}),"\n",(0,a.jsxs)(n.p,{children:["First off, you'll want to download the most recent database dump from GCD which can be found ",(0,a.jsx)(n.a,{href:"https://www.comics.org/download/",children:"here"}),". Once it's finished downloading, unzip the file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"unzip current.zip -d /tmp/\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see output similar to this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Archive:  current.zip\n  inflating: /tmp/2022-10-01.sql   \n"})}),"\n",(0,a.jsxs)(n.p,{children:["Ok, now that we've got the data from gcd, let's create a ",(0,a.jsx)(n.a,{href:"https://www.mysql.com/",children:"MySQL"})," container. We need to first pull a MySQL image, which can be done by running:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman pull docker.io/library/mysql:5.7\n"})}),"\n",(0,a.jsx)(n.p,{children:"After it's done downloading the image, you can confirm:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman images\n"})}),"\n",(0,a.jsx)(n.p,{children:"which should return output similar to this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"bpepple@frodo ~ $ podman images mysql\nREPOSITORY               TAG         IMAGE ID      CREATED       SIZE\ndocker.io/library/mysql  5.7         eb175b0743cc  19 hours ago  448 MB\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now we need to create the container. You'll want to replace user and mysql credentials with your own values. The ",(0,a.jsx)(n.code,{children:"volume"})," flag is where on your filesystem you want to save the database. The ",(0,a.jsx)(n.code,{children:"Z"})," suffix is used for systems, primarily ",(0,a.jsx)(n.a,{href:"https://www.redhat.com/en/topics/linux/what-is-selinux",children:"Red Hat"}),"-based, that use ",(0,a.jsx)(n.a,{href:"https://www.redhat.com/en/topics/linux/what-is-selinux",children:"SELinux"}),". If you don't use SELinux that can be dropped:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman run -d --name mysql -p 3306:3306 -e MYSQL_USER=bpepple -e MYSQL_PASSWORD=123456 -e MYSQL_DATABASE=gcd -e MYSQL_ROOT_PASSWORD=567890 --volume /home/bpepple/Storage/pods/mysql/:/var/lib/mysql:Z mysql:5.7\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now let's verify that the container was created and is running by using the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman ps\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see output similar to this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"bpepple@frodo ~ $ podman ps\nCONTAINER ID  IMAGE                       COMMAND CREATED       STATUS           PORTS                  NAMES\n400c957ae25d  docker.io/library/mysql:5.7 mysqld  7 seconds ago Up 7 seconds ago 0.0.0.0:3306->3306/tcp mysql\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now we just need to dump the data from GCD into the database. We can do this by running:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"cat /tmp/2022-10-01.sql | podman exec -i mysql /usr/bin/mysql -u root --password=567890 gcd\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Depending on the specs of your machine, this might be a good time to grab some coffee, since the SQL dump is ",(0,a.jsx)(n.strong,{children:"very"})," large and will take awhile to finish. Once it's done, we can start using the database by attaching to the container:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman exec -it mysql mysql -ubpepple -p gcd\n"})}),"\n",(0,a.jsx)(n.p,{children:"This command will prompt you for your password, and then you'll see the MySQL prompt where you can run a simple SQL statement like so:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:" DESCRIBE gcd_issue;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Which should produce output similar to this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"+----------------------------+---------------+------+-----+---------------------+----------------+\n| Field                      | Type          | Null | Key | Default             | Extra          |\n+----------------------------+---------------+------+-----+---------------------+----------------+\n| id                         | int(11)       | NO   | PRI | NULL                | auto_increment |\n| number                     | varchar(50)   | NO   | MUL | NULL                |                |\n| volume                     | varchar(50)   | NO   | MUL |                     |                |\n| no_volume                  | tinyint(1)    | NO   | MUL | 0                   |                |\n| display_volume_with_number | tinyint(1)    | NO   | MUL | 0                   |                |\n| series_id                  | int(11)       | NO   | MUL | NULL                |                |\n| indicia_publisher_id       | int(11)       | YES  | MUL | NULL                |                |\n| indicia_pub_not_printed    | tinyint(1)    | NO   |     | NULL                |                |\n| brand_id                   | int(11)       | YES  | MUL | NULL                |                |\n| no_brand                   | tinyint(1)    | NO   | MUL | NULL                |                |\n| publication_date           | varchar(255)  | NO   |     | NULL                |                |\n| key_date                   | varchar(10)   | NO   | MUL | NULL                |                |\n| sort_code                  | int(11)       | NO   | MUL | NULL                |                |\n| price                      | varchar(255)  | NO   |     | NULL                |                |\n| page_count                 | decimal(10,3) | YES  |     | NULL                |                |\n| page_count_uncertain       | tinyint(1)    | NO   |     | 0                   |                |\n| indicia_frequency          | varchar(255)  | NO   |     |                     |                |\n| no_indicia_frequency       | tinyint(1)    | NO   | MUL | 0                   |                |\n| editing                    | longtext      | NO   |     | NULL                |                |\n| no_editing                 | tinyint(1)    | NO   | MUL | 0                   |                |\n| notes                      | longtext      | NO   |     | NULL                |                |\n| created                    | datetime      | NO   |     | 1901-01-01 00:00:00 |                |\n| modified                   | datetime      | NO   | MUL | 1901-01-01 00:00:00 |                |\n| deleted                    | tinyint(1)    | NO   | MUL | 0                   |                |\n| is_indexed                 | tinyint(1)    | NO   | MUL | 0                   |                |\n| isbn                       | varchar(32)   | NO   | MUL |                     |                |\n| valid_isbn                 | varchar(13)   | NO   | MUL |                     |                |\n| no_isbn                    | tinyint(1)    | NO   | MUL | 0                   |                |\n| variant_of_id              | int(11)       | YES  | MUL | NULL                |                |\n| variant_name               | varchar(255)  | NO   |     |                     |                |\n| barcode                    | varchar(38)   | NO   | MUL |                     |                |\n| no_barcode                 | tinyint(1)    | NO   |     | 0                   |                |\n| title                      | varchar(255)  | NO   | MUL |                     |                |\n| no_title                   | tinyint(1)    | NO   | MUL | 0                   |                |\n| on_sale_date               | varchar(10)   | NO   | MUL | NULL                |                |\n| on_sale_date_uncertain     | tinyint(1)    | NO   |     | 0                   |                |\n| rating                     | varchar(255)  | NO   | MUL | NULL                |                |\n| no_rating                  | tinyint(1)    | NO   | MUL | NULL                |                |\n| volume_not_printed         | tinyint(1)    | NO   |     | NULL                |                |\n| no_indicia_printer         | tinyint(1)    | NO   |     | NULL                |                |\n+----------------------------+---------------+------+-----+---------------------+----------------+\n40 rows in set (0.00 sec)\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Great, we've got the database up and running! To logout from the container just type:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\\q\n"})}),"\n",(0,a.jsx)(n.p,{children:"To stop the container, you would just use the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"podman stop mysql\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And that's it! Podman has tons of niceties (like auto-updating images, using ",(0,a.jsx)(n.a,{href:"https://systemd.io/",children:"systemd"})," for container start-ups, etc.) and I'd encourage you to read up on using some its many features. If it get some free time, I'll do a follow-up article about using ",(0,a.jsx)(n.a,{href:"https://www.python.org/",children:"Python"})," to query the database and using that data for things like writing metadata to comic archives."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},7075:e=>{e.exports=JSON.parse('{"permalink":"/blog/podman-gcd","source":"@site/blog/2022-10-08-podman/index.md","title":"Using Podman to Run GCD Database Locally","description":"I\'ve had a few users ask me how to run a local copy of the Grand Comics Database, so I figured I\'d do a short write-up on how I do it.","date":"2022-10-08T11:35:00.000Z","tags":[{"inline":true,"label":"comic","permalink":"/blog/tags/comic"},{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"podman","permalink":"/blog/tags/podman"},{"inline":true,"label":"mysql","permalink":"/blog/tags/mysql"},{"inline":true,"label":"gcd","permalink":"/blog/tags/gcd"},{"inline":true,"label":"grandcomicdatabase","permalink":"/blog/tags/grandcomicdatabase"}],"readingTime":4.04,"hasTruncateMarker":false,"authors":[{"name":"Brian Pepple","title":"Founder of the Metron Project / Code Monkey","url":"https://github.com/bpepple","imageURL":"https://github.com/bpepple.png","key":"bpepple","page":null}],"frontMatter":{"slug":"podman-gcd","title":"Using Podman to Run GCD Database Locally","date":"2022-10-08T11:35","authors":["bpepple"],"tags":["comic","database","podman","mysql","gcd","grandcomicdatabase"]},"unlisted":false,"prevItem":{"title":"Limited Series Type","permalink":"/blog/series-type-change"},"nextItem":{"title":"OS Upgrade","permalink":"/blog/ubuntu-2204-lts"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);