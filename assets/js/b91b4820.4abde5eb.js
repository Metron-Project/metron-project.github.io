"use strict";(self.webpackChunkmetron_project_github_io=self.webpackChunkmetron_project_github_io||[]).push([[4468],{4051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(5893),i=n(3905);const o={sidebar_position:2,title:"MetronInfo.xml"},a=void 0,c={id:"metroninfo/intro",title:"MetronInfo.xml",description:"What is it?",source:"@site/docs/metroninfo/intro.md",sourceDirName:"metroninfo",slug:"/metroninfo/intro",permalink:"/docs/metroninfo/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"MetronInfo.xml"},sidebar:"tutorialSidebar",previous:{title:"MetronInfo",permalink:"/docs/category/metroninfo"},next:{title:"Schema documentation",permalink:"/docs/metroninfo/documentation"}},s={},l=[{value:"What is it?",id:"what-is-it",level:2},{value:"Rationale",id:"rationale",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"what-is-it",children:"What is it?"}),"\n",(0,r.jsxs)(t.p,{children:["A new XML schema for comic book's metadata, which hopes to improve some of the some of the deficiencies that\nexist with the ",(0,r.jsx)(t.code,{children:"ComicInfo.xml"})," schema."]}),"\n",(0,r.jsx)(t.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ComicInfo.xml"})," schema was designed for the needs of ComicRack Application (which for all intents is a dead project), and supports a fairly limited amount of data. Some benefits of a new schema would include:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Additional ",(0,r.jsx)(t.code,{children:"Elements"})," for information. (eg. Price, Global Trade Item Numbers, Series Type, etc.)"]}),"\n",(0,r.jsxs)(t.li,{children:["Better handling of data types. Instead of using delimited strings for list items, we can use Arrays of ",(0,r.jsx)(t.code,{children:"Elements"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Ability to identify where the data was obtained from. (eg. Comic Vine, Metron, Grand Comics Database, etc.)"}),"\n",(0,r.jsxs)(t.li,{children:["Add ",(0,r.jsx)(t.code,{children:"ID"})," elements from the Information Source to resources (Characters, Creators, etc), so items with the same name are associated correctly if used in a Plex-like Comic Server."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Since Digital Comics are just are archive files (like .zip) this new XML schema can co-exist with any existing ",(0,r.jsx)(t.code,{children:"ComicInfo.xml"})," if needed for backward compatibility."]})]})}function m(e={}){const{wrapper:t}={...(0,i.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3905:(e,t,n)=>{n.d(t,{ah:()=>l});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),f=l(n),h=i,u=f["".concat(s,".").concat(h)]||f[h]||d[h]||o;return n?r.createElement(u,a(a({ref:t},m),{},{components:n})):r.createElement(u,a({ref:t},m))}));m.displayName="MDXCreateElement"}}]);